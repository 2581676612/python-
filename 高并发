在互联网时代，所讲的并发、高并发，通常是指并发访问。也就是在某个时间点，有多少个访问同时到来。
如果某个系统的日pv（page view）在千万级别以上，他就可能是一个高并发的系统。

并发与并行的区别

这里涉及到一个问题,很多同学搞不清楚并发与并行的区别,这里我根据我根据知乎上这个问题某位网友的例子,我觉得很好

你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行
你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发
你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行
并发:你有处理多个任务的能力,不一定同时(一个CPU轮流)

并行:有同时处理多个任务的能力(多个CPU同时)

并发和并行都可以是很多个线程,就看这些线程能不能同时被(多个)CPU执行,可以说明是并行,并发是多个线程被一个CPU轮流切换着执行

高并发相关指标有响应时间(Response Time),吞吐量(Throughput),每秒查询率QPS(Query Per Second),并发用户数等
* QPS（TPS）：每秒钟 request/事务 数量，在互联网领域，指每秒响应请求数（指http请求）； 
* 吞吐量：单位时间内处理的请求数量（通常由QPS与并发数决定）； 
* 响应时间：系统对一个请求做出响应的平均时间。例如系统处理一个HTTP请求需要200ms，这个200ms就是系统的响应时间（我认为这里应该仅包含处理时间，网络传输时间忽略）。
* 并发用户数:同时承载正常使用系统功能的用户数量. 例如微信,同时可以x亿人在线,一定程度代表了系统的并发用户数


这里一定要注意呃，QPS ≠ 并发数

并发是指，某个时刻有多少个访问同时到来。QPS是指秒钟响应的请求数量。那么这里就肯容易推算出一个公式：

QPS = 并发数 / 平均响应时间


既然QPS是每秒钟处理的http请求数量。那么1s = 1000ms。假设我们当前一个http请求服务器处理完成需要100ms（即那么 平均响应时间 = 100ms ）。那么它1s钟可以处理10个请求。也就是说 qps = 10。推算出 并发数 = 10

常常我们被问到高并发的问题，其实从某种程度上来说是怎么提高现有程序的性能。现在我们基于上面的假设，来进行分析。假设现在有个系统性能上就是我们上面的假设，它每天有 300万pv，运行在单机上（当然经常宕机），按照上面的系统性能数据，给出优化解决方案。


提高并发能力


最快速解决方案，就是增加机器。我们根据以上情况来实际计算一下。 
* 访问量：200w pv 
* QPS：10

根据日常经验，80% 的访问量集中在 20%的时间，算一下这 200w pv实际需要机器达到多少qps才能满足。

qps = (200w * 0.8) / (24 * 3600 * 0.3)

qps = 61.7
实际上如果在单机上，要求我们每秒钟处理请求必须达到 61.7 以上才行，而实际上我们当前系统的qps是 10。那么怎么解决？

增加机器:读写分离,分布式部署(不同模块),集群(相同服务)
增强单机性能:数据库优化,优化代码(如算法),硬件升级(CPU,内存,SSD等)

那么常见的单机如何提升性能？比如：增加不常变化数据的缓存，开启php的opcache，优化代码（如：n+1问题、多重嵌套循环、深层递归等），db表优化等等。
